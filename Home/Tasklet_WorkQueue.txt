Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2014-07-09T16:28:07.651806

====== Tasklet WorkQueue ======
Created Wednesday 09 July 2014

A tasklet runs in atomic mode (so cannot sleep) 
although it can 'wake up' a task that is sleeping

After a tasklet is scheduled, it runs once at some time in the near future. If the same tasklet is scheduled again, before it has had a chance to run, it still runs only once. If it is already running, for example on another processor, the tasklet is rescheduled and runs again.As an optimization, a tasklet always runs on the processor that scheduled it—making better use of the processor’s cache.

For example, in today’s Linux implementations, the analysis of network packets is done in a tasklet context, and not by the interrupt service routine. Since tasklets are merely scheduled as a high-priority process, the latency until the packets are analyzed closely enough to detect a packet loss depends on how busy the computer is at that time.

Packet reception, in contrast to transmission, doesn't need any special interrupt handling. Calling snull_rx (which we have already seen) is all that's required.


Our ‘tasklet.c’ demo uses the ‘interruptible sleep’ mechanism in its device-driver ‘read()’ method
Whenever the UART receives new data, it will interrupt whatever else the CPU is doing
Quickly our ‘top half’ interrupt-handler pauses any more data-transfers, schedules our ‘bottom half’ for future execution, then resumes the interrupted task
Later our ‘tasklet’ will move accumulated data from the FIFO to a ringbuffer, then will awaken any task was sleeping on our ‘read’ function’s wait-queue


**Memcpy is safe to use in Tasklets**
You can do anything inside the code that's upto you, only rule is no
sleepy things, and no copy_to_ or copy_from both can sleep and both require process
context which you don't have. Besides the no sleeping rule, you can do whatever you
like. By scheduling, I mean scheduling the current code by explicitly calling schedule
or some other sleeping function call. But you can wake_up, tasklet_schedule, complete, complete_all etc.
you can do kmalloc, don't forget GFP_ATOMIC, but no vmalloc. You can do memcpy, but
 no copy_to/copy_from

**Possible Problem for using Kmalloc in tasklets**
  Sleeping in Kmalloc

Let’s look at an example.Assume you need to dynamically allocate enough room for a abc structure:
struct abc *p;
p = kmalloc(sizeof(struct abc), GFP_KERNEL);
if (!p)
/* handle error ... */

frequently used flags
The vast majority of allocations in the kernel use the GFP_KERNEL flag.The resulting allocation is a normal priority allocation that might sleep. Because the call can block, this flag can be used only from process context that can safely reschedule. (That is, no locks are held and so on.) Because this flag does not make any stipulations as to how the kernel may obtain the requested memory, the memory allocation has a high probability of succeeding. On the far other end of the spectrum is the GFP_ATOMIC flag. Because this flag specifies a memory allocation that cannot sleep, the allocation is restrictive in the memory it can obtain for the caller.** If no sufficiently sized contiguous chunk of memory is available, the kernel is not likely to free memory because it cannot put the caller to sleep. **Conversely, the GFP_KERNEL allocation can put the caller to sleep to swap inactive pages to disk, flush dirty pages to disk, and so on. **Because GFP_ATOMIC cannot perform any of these actions, it has less of a chance of succeeding (at least when memory is low) compared to GFP_KERNEL allocations.** Nonetheless, the GFP_ATOMIC flag is the only option when the
current code cannot sleep, such as with interrupt handlers, softirqs, and tasklets.



**Note that semaphores and mutexes cannot be used in interrupts**
A Variant of Spinlocks can be used in Interrupt handlers whereas semaphores/mutexes cannot be as they would sleep in the handler. The interrupt handler would spin before the lock is available. A sleep in the interrupt handler is not allowed. It is also important here to understand that this kind of spinlocks need to disable the interrupts for the local cpu before getting used in the interrupt handler. If any other interrupt occurs in a different cpu at that point of time and it spins on the same lock, it doesn't prevent the lock holder in the other cpu to release it.

spin_lock_irqsave(&mr_lock, flags);
/* critical region ... */
spin_unlock_irqrestore(&mr_lock, flags);




**What is a semaphore?**
Semaphores in Linux are sleeping locks.When a task attempts to acquire a semaphore that is unavailable, the semaphore places the task onto a wait queue and puts the task to sleep.The processor is then free to execute other code.When the semaphore becomes available, one of the tasks on the wait queue is awakened so that it can then acquire the semaphore.



