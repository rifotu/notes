Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2014-12-12T11:17:20+02:00

====== CrossCompile ======
Created Friday 12 December 2014

1) ARM mimarisine ait kodların derlenmesi için gereken derleyicinin sisteme tanıtılması 

Gönderilen dosyalar arasında yeralan derleyici binary dosyalarını sistemdeki PATH değişkenine tanıtmak için bashrc dosyasını açın

$ gedit ~/.bashrc

Açılan text editöre aşağıdaki satırı girin (teslim edilen dosyaların Desktop'a konulduğu varsayılmıştır) ve değişiklikleri kaydedip çıkın.

export PATH=~/Desktop/k2_delivery/cross_compiler/:$PATH

Bilgisayarınızı yeniden başlatın veya aşağıdaki komutu girip değişiklikleri sisteme yansıtın. 

$ source ~/.bashrc

Şu aşamada derleyici binary dosyalarının sistem tarafından tanınıyor olması gerekmektedir. Deneme yapmak için aşağıdaki komutu girebilirsiniz

$ arm-none-linux-gnueabi-gcc -v



2) Beagleboard için hazırlanmış Linux Kernel'in derlenmesi

Sıkıştırılmış kerneli bilgisayarınızda herhangi bir yere açın

$ tar -xzvf k2_kernel.tgz
$ cd K2_Kernel/linux-2.6.32-ccmtp/

Kerneli ARM için derlemek ve istenilen değişiklikleri yapmak için aşağıdaki komut ile menuconfig menüsüne gidin

$ make ARCH=arm CROSS_COMPILE=arm-none-linux-gnueabi- menuconfig

İstenilen değişiklikleri menuconfig menüsünden uyguladıktan sonra EXIT seçeneği ile çıkın ve uImage oluşturmak için aşağıdaki komutu kullanın

$ make ARCH=arm CROSS_COMPILE=arm-none-linux-gnueabi- uImage

Oluşan uImage dosyasını ./arch/arm/boot klasöründe bulabilirsiniz.

$ ls ./arch/arm/boot/uImage



3) Beagleboard üzerinde çalışacak olan client kodunun derlenmesi

Beagleboard üzerinde çalışan yazılımda herhangi bir değişiklik istendiğinde kaynak kodlar arasında client klasöründe değişiklik yapılması gerekmektedir. Bu noktada dikkat edilmesi gereken önemli hususlardan biri, client kodunun libmodeo kütüphanesini server ile beraber ortak kullanmasıdır. Dolayısıyla client kodu derlenmeden önce libmodeo kütüphanesinin ARM mimarisine göre derlendiğinden emin olunmalıdır.

 $ cd ~/Desktop/k2_delivery/source/libmodeo
 $ ./configure --build=i386-linux  --host=arm-none-linux-gnueabi
 $ make clean all

 Bu noktada libmodeo kütüphanesi (libmodeo.a) ARM mimarisine göre derlenmiş olmaktadır. Client kodu, istenilen değişiklikler yapıldıktan sonra aşağıdaki şekilde derlenebilir.

$ cd ~/Desktop/k2_delivery/source/client
$ make clean all

Derleme hatasız bir şekilde bittikten sonra oluşan binary, modeo olarak adlandırılmıştır. Bu noktada dikkat edilmesi gereken bir başka husus, client koduna farklı bir kaynak kod dosyası veya kütüphane eklenmesi durumunda yapılması gereken hususlardır. 
Örnek olarak uygulama.c kaynak kod dosyasının ve hesaplama.a kütüphanesinin client kodlarına eklenmek istendiği durum aşağıda belirtilmiştir.

İlk olarak Makefile.am dosyasına aşağıdaki eklentilerin yapılması gerekmektedir.

$ gedit ~/Desktop/k2_delivery/source/client/Makefile.am

Açılan text editörde kaynak kod dosyalarına uygulama.c eklenir.

modeo_SOURCES=\
	src/main.c \
	src/client.c \
	src/modem.c \
	src/settings.c \
	src/timer.c \
	src/file_transfer.c \
	src/ftp.c \
        src/uygulama.c 

hesaplama.a kütüphanesinin eklenmesi için ise aşağıdaki satırların eklenmesi gerekmektedir. 

HESAPLAMA=$(top_srcdir)/../libhesaplama
AM_LDFLAGS = -L$(HESAPLAMA) -L$(MODEO)
LDADD = $(MODEO)/libmodeo.a \
                $(HESAPLAMA)/hesaplama.a \
		-ldl -lpthread -lrt -lm

AM_CPPFLAGS = -I$(HESAPLAMA)/inc -I$(MODEO)/inc -I./inc 

Eklentiler yapıldıktan sonra değişikliklerin aktif hale gelmesi için autoreconf mekanizması kullanılacaktır. Aşağıdaki komutlar sırasıyla girilerek süreç tamamlanır.

$ autoreconf -i
$ ./configure --build= i386-linux --host=arm-none-linux-gnueabi
$ make clean all


4) Server Kodunun değiştirilmesi için gerekli değişiklikler

Öncelikle server kodunun kullandığı libmodeo kütüphanesinin i386 mimarisine göre derlendiğinden emin olunmalıdır. 

 $ cd ~/Desktop/k2_delivery/source/libmodeo
 $ ./configure
 $ make clean all

Daha sonra server kaynak kod klasörüne gidilip derleme gerçekleştirilebilir. Derleme sonucunda oluşturulan binary "server" olarak adlandırılmıştır.

 $ cd ~/Desktop/k2_delivery/source/server
 $ make clean all


Oluşan server programı, modeo server olarak kullanılacak olan bilgisayarda /home/modeo/conf altına modeo_server olarak kopyalanır.

 $ cp ~/Desktop/server /home/modeo/conf/modeo_server

5) Server Kullanıcı Arayüzünün Derlenmesi

Qt ile hazırlanmış arayüzün derlenmesi için bilgisayarda Qt SDK 'ya ihtiyaç duyulmaktadır. SDK kurulduktan sonra aşağıdaki adımlar izlenerek derleme gerçekleştirilir.

  $ cd ~/Desktop/k2_delivery/source/server_gui
  $ qmake ModeoUserInterface.pro
  $ make


6) Libmodeo kütüphanesinin derlenmesi.

Libmodeo kütüphanesi hem client hemde server kodları tarafından kullanılmaktadır. Dolayısıyla derlenirken ARM mimarisinde mi yoksa i386 mimarisinde mi kullanılcağına göre konfigürasyonu yapılmalıdır.

i386 mimarisine göre derlenirken

 $ cd ~/Desktop/k2_delivery/source/libmodeo
 $ ./configure
 $ make clean all

ARM mimarisine göre derlenirken

 $ cd ~/Desktop/k2_delivery/source/libmodeo
 $ ./configure --build=i386-linux  --host=arm-none-linux-gnueabi
 $ make clean all


7) Server Watchdog (server_wd) programının derlenmesi

Server Watchdog, server programının sürekli olarak çalıştığını kontrol etmekde ve herhangi bir sebebten ötürü programın çalışmadığını farkettiğinde server binarysini tekrardan çalıştırmaktadır.
Normal çalışma şartlarında watchdog modülü server programını "modeo_server" adı altında aramaktadır. Aşağıdaki komutlar girilerek watchdog modülü derlenir.

$ ./configure
$ make clean all

Oluşturulan server_wd programı server olarak kullanılan bilgisayarda /home/modeo/conf klasörüne kopyalanır.

$ cp ~/Desktop/server_wd /home/modeo/conf/


7) CCMTP protokolünün derlenmesi 

Protokolün derlenmesi kernelin altında modül olarak gerçekleşmektedir. CCMTP kaynak kodlarında yapılan değişikliklerin etkin olması için kaynak kodların kernelin altındaki CCMTP modülüne kopyalanıp modüllerin derlenmesi gerekmektedir.

$ cp ~/Desktop/k2_delivery/source/ccmtp/net/ccmtp/*.c ~/Desktop/k2_delivery/K2_Kernel/linux-2.6.32-ccmtp/net/ccmtp/

Yapılan değişiklikler aktarıldıktan sonra kernel modülleri tekrardan derlenmelidir. Oluşan yeni ccmtp modülü kernelin altında .../net/ccmtp/ccmtp.ko klasöründe ccmtp.ko olarak bulunmaktadır.

$ make ARCH=arm CROSS_COMPILE=arm-none-linux-gnueabi- modules
$ cp ~/Desktop/k2_delivery/K2_Kernel/linux-2.6.32-ccmtp/net/ccmtp/ccmtp.ko ~/Desktop/



======================== WIFI DONGLE STUFF =============================================

Denenen farklı yollar

cross compile sırasında ilk olarak Makefile içinden PLATFORM olarak arm tabanlı bir işlemci secildi (MVL5)
fakat derlendikten sonra oluşan  driver dosyası insmod edilemedi. 


DARK RangeMax Nano USB2.0
Cross Compile için yapılanlar

(1) MT7601 için kaynak kodları indir
      git clone https://github.com/porjo/mt7601.git

(2) cross compile için aşağıdaki degisikliklerin yapılması gerekmektedir

src/Makefile:

line 30
PLATFORM = PC

line 210
ifeq ($(PLATFORM),PC)
# Linux 2.6
LINUX_SRC = /home/rifat/projects/hdmodeo/git/modeo-hd/linux-2.6.32-ccmtp
# Linux 2.4 Change to your local setting
#LINUX_SRC = /usr/src/linux-2.4
LINUX_SRC_MODULE = /home/rifat/projects/hdmodeo/git/modeo-hd/linux-6.32-ccmtp/net/wireless/
CROSS_COMPILE = /opt/EMA/cross_compiler/arm-2009q1/bin/arm-none-linux-gnueabi-
ARCH=arm
export ARCH
export CROSS_COMPILE
endif


src/include/os/rt_linux.h              http://raspberrypi.stackexchange.com/questions/27173/issue-with-mt7601u-usb-dongle-wifi-driver
line 282
typedef struct _OS_FS_INFO_
{
#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,12,0)
	uid_t				fsuid;
	gid_t				fsgid;
#else
	//kuid_t				fsuid;
	//kgid_t				fsgid;
    int				fsuid;  //  changed by RT to overcome compile errors
    int				fsgid;
#endif
	mm_segment_t	fs;
} OS_FS_INFO;

(3) make komutuyla driver dosyası oluşturulur ve  modeo_client' da   / root / 18 altına atılır
scp src/os/linux/mt7601Usta.ko root@192.168.2.54:/root/18

(4) firmware  ./src/RT2870STA.dat ,   modeo_client cihazı üzerinde /etc/Wireless/RT2870STA/ klasörüne koyulur
(modeo_client)  mkdir -p /etc/Wireless/RT2870STA
scp ./src/RT2870STA.dat  root@192.168.2.54:/etc/Wireless/RT2870STA/


--------------------------
(5) modeo_client üzerinde  wifi scriptlerinin  wlan0 yerine  ra0 olarak degistirilmesi gerekmektedir.

/root/get_wifi_info.sh
/root/wifi_connection_on
/etc/init.d/S94Wifi



Inca - IUDS-300  (lsusb çıktısı    Bus 001 Device 004: ID 0bda:8172)  Wireless Dongle 'ı cross compile etmek için

realtek sitesinden 
http://218.210.127.131/downloads/downloadsView.aspx?Langid=1&PNid=48&PFid=48&Level=5&Conn=4&DownTypeID=3&GetDown=false&Downloads=true#RTL8188SU
rtl8191SU  linux driver indirilir   ( 0001-RTL819xSU_usb_linux_v2.6.6.0.20120405.zip )

dosyalar açılır ve makefile da aşağıdaki degisiklik yapılır.

+ line14   CONFIG_PLATFORM_MODEO_CLIENT_V2 = y

+ line 102  (kernel adresi degistirilmelidir) 
ifeq ($(CONFIG_PLATFORM_MODEO_CLIENT_V2), y)                                                                                                      
EXTRA_CFLAGS += -DCONFIG_LITTLE_ENDIAN
ARCH := arm
CROSS_COMPILE := arm-none-linux-gnueabi-
KVER  := 2.6.32
#KSRC := /home/serkan/workspace/linux2.6.32_ccmtp
#KSRC := /media/9d87da1a-3479-411c-964a-ef38fc9aaee8/home/murat/workspace/modeo_new/GIT/modeo-src/linux-2.6.32-ccmtp
#KSRC := /home/cengiz/Projects/Modeo/Modeo_Kernel/hd/linux-2.6.32-ccmtp-orij
KSRC := /home/rifat/projects/hdmodeo/git/modeo-hd/linux-2.6.32-ccmtp
 endif

driver compile edilir ve oluşan  ./8712u.ko    modülü modeo_client'a atılıp insmod edilir

daha sonra ifconfig wlan0 up  ve iwlist wlan0 s  komutlarıyla wifi dongle'ın çalışıp çalışmadığı belirlenir


farklı donglelar
WL-167G V3 Wireless N
INCA- IUDS-300
Dark RangeMax Nano



